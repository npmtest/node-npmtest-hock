{"/home/travis/build/npmtest/node-npmtest-hock/test.js":"/* istanbul instrument in package npmtest_hock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hock/lib.npmtest_hock.js":"/* istanbul instrument in package npmtest_hock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hock = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hock = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hock/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hock && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hock\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hock.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hock.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hock.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hock.__dirname + '/lib.npmtest_hock.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hock/node_modules/hock/lib/hock.js":"var http = require('http'),\n    Request = require('./request'),\n    deepEqual = require('deep-equal');\n\n/**\n * Hock class\n *\n * @description This is the main class for Hock. It handles creation\n * of the underlying webserver, and enqueing all of the requests.\n *\n * @param {object}      [options]       options for your Hock server\n * @param {boolean}     [options.throwOnUnmatched]  Tell Hock to throw if\n *    receiving a request without a match (Default=true)\n *\n * @type {Function}\n */\nvar Hock = module.exports = function (options) {\n  options = options || {};\n  this._throwOnUnmatched = (typeof options.throwOnUnmatched === 'boolean' ? options.throwOnUnmatched : true);\n  this._assertions = [];\n  this.handler = Hock.prototype.handler.bind(this);\n};\n\n/**\n * Hock.enqueue\n *\n * @description enqueue a request into the queue\n *\n * @param {object}    request     The request to enter in the hock queue\n * @param request\n */\nHock.prototype.enqueue = function (request) {\n  if (this._requestFilter) {\n    request._requestFilter = this._requestFilter;\n  }\n\n  if (this._defaultReplyHeaders) {\n    request._defaultReplyHeaders = this._defaultReplyHeaders;\n  }\n\n  this._assertions.push(request);\n};\n\n/**\n * Hock.hasRoute\n *\n * @description test if there is a request on the assertions queue\n *\n * @param {String}    method      the method of the request to match\n * @param {String}    url         the route of the request to match\n * @param {String}    [body]      optionally - use if you set a body\n * @param {object}    [headers]   optionally - use if you set a header\n * @returns {Boolean}\n */\nHock.prototype.hasRoute = function (method, url, body, headers) {\n  if (!body) {\n    body = '';\n  }\n\n  if (!headers) {\n    headers = {};\n  }\n\n  var found = this._assertions.filter(function(request) {\n    return request.method === method\n          && request.url === url\n          && request.body === body\n          && deepEqual(request.headers, headers);\n  })\n  return !!found.length;\n};\n\n/**\n * Hock.done\n *\n * @description Throw an error if there are unprocessed requests in the assertions queue.\n * If there are unfinsihed requests, i.e. min: 2, max 4 with a count of 2, that request will be\n * ignored for the purposes of throwing an error.\n *\n */\nHock.prototype.done = function (cb) {\n  var err;\n\n  if (this._assertions.length) {\n    this._assertions = this._assertions.filter(function(request) {\n      return request.isDone();\n    });\n\n    if (this._assertions.length) {\n      err = new Error('Unprocessed Requests in Assertions Queue: \\n' + JSON.stringify(this._assertions.map(function (item) {\n        return item.method + ' ' + item.url;\n      })));\n    }\n  }\n\n  if (!err) {\n    return cb && cb();\n  }\n\n  if (!cb) {\n    throw err;\n  }\n\n  return cb(err);\n\n};\n\n/**\n * Hock.get\n *\n * @description enqueue a GET request into the assertion queue\n *\n * @param {String}    url         the route of the request to match\n * @param {object}    [headers]   optionally match the request headers\n * @returns {Request}\n */\nHock.prototype.get = function (url, headers) {\n  return new Request(this, {\n    method: 'GET',\n    url: url,\n    headers: headers || {}\n  });\n};\n\n/**\n * Hock.head\n *\n * @description enqueue a HEAD request into the assertion queue\n *\n * @param {String}    url         the route of the request to match\n * @param {object}    [headers]   optionally match the request headers\n * @returns {Request}\n */\nHock.prototype.head = function (url, headers) {\n  return new Request(this, {\n    method: 'HEAD',\n    url: url,\n    headers: headers || {}\n  });\n};\n\n/**\n * Hock.put\n *\n * @description enqueue a PUT request into the assertion queue\n *\n * @param {String}          url         the route of the request to match\n * @param {object|String}   [body]      the request body (if any) of the request to match\n * @param {object}          [headers]   optionally match the request headers\n * @returns {Request}\n */\nHock.prototype.put = function (url, body, headers) {\n  return new Request(this, {\n    method: 'PUT',\n    url: url,\n    body: body || '',\n    headers: headers || {}\n  });\n};\n\n/**\n * Hock.patch\n *\n * @description enqueue a PATCH request into the assertion queue\n *\n * @param {String}          url         the route of the request to match\n * @param {object|String}   [body]      the request body (if any) of the request to match\n * @param {object}          [headers]   optionally match the request headers\n * @returns {Request}\n */\nHock.prototype.patch = function (url, body, headers) {\n  return new Request(this, {\n    method: 'PATCH',\n    url: url,\n    body: body || '',\n    headers: headers || {}\n  });\n};\n\n/**\n * Hock.post\n *\n * @description enqueue a POST request into the assertion queue\n *\n * @param {String}          url         the route of the request to match\n * @param {object|String}   [body]      the request body (if any) of the request to match\n * @param {object}          [headers]   optionally match the request headers\n * @returns {Request}\n */\nHock.prototype.post = function (url, body, headers) {\n  return new Request(this, {\n    method: 'POST',\n    url: url,\n    body: body || '',\n    headers: headers || {}\n  });\n};\n\n/**\n * Hock.delete\n *\n * @description enqueue a DELETE request into the assertion queue\n *\n * @param {String}          url         the route of the request to match\n * @param {object|String}   [body]      the request body (if any) of the request to match\n * @param {object}          [headers]   optionally match the request headers\n * @returns {Request}\n */\nHock.prototype.delete = function (url, body, headers) {\n  return new Request(this, {\n    method: 'DELETE',\n    url: url,\n    body: body || '',\n    headers: headers || {}\n  });\n};\n\n/**\n * Hock.copy\n *\n * @description enqueue a COPY request into the assertion queue\n *\n * @param {String}          url         the route of the request to match\n * @param {object|String}   [body]      the request body (if any) of the request to match\n * @param {object}          [headers]   optionally match the request headers\n * @returns {Request}\n */\nHock.prototype.copy = function (url, body, headers) {\n  return new Request(this, {\n    method: 'COPY',\n    url: url,\n    headers: headers || {}\n  });\n};\n\n/**\n * Hock.filteringRequestBody\n *\n * @description Provide a function to Hock to filter the request body\n *\n * @param {function}    filter    the function to filter on\n *\n * @returns {Hock}\n */\nHock.prototype.filteringRequestBody = function (filter) {\n  this._requestFilter = filter;\n  return this;\n};\n\n/**\n * Hock.filteringRequestBodyRegEx\n *\n * @description match incoming requests, and replace the body based on\n * a regular expression match\n *\n * @param {RegEx}       source    The source regular expression\n * @param {string}      replace   What to replace the source with\n *\n * @returns {Hock}\n */\nHock.prototype.filteringRequestBodyRegEx = function (source, replace) {\n  this._requestFilter = function (path) {\n    if (path) {\n      path = path.replace(source, replace);\n    }\n    return path;\n  };\n\n  return this;\n};\n\n/**\n * Hock.filteringPath\n *\n * @description Provide a function to Hock to filter request path\n *\n * @param {function}    filter    the function to filter on\n *\n * @returns {Hock}\n */\nHock.prototype.filteringPath = function (filter) {\n  this._pathFilter = filter;\n  return this;\n};\n\n/**\n * Hock.filteringPathRegEx\n *\n * @description match incoming requests, and replace the path based on\n * a regular expression match\n *\n * @param {RegEx}       source    The source regular expression\n * @param {string}      replace   What to replace the source with\n *\n * @returns {Hock}\n */\nHock.prototype.filteringPathRegEx = function (source, replace) {\n  this._pathFilter = function (path) {\n    if (path) {\n      path = path.replace(source, replace);\n    }\n    return path;\n  };\n\n  return this;\n};\n\n/**\n * Hock.clearBodyFilter\n *\n * @description clear the body request filter, if any\n *\n * @returns {Hock}\n */\nHock.prototype.clearBodyFilter = function () {\n  delete this._requestFilter;\n  return this;\n}\n\n/**\n * Hock.defaultReplyHeaders\n *\n * @description set standard headers for all responses\n *\n * @param {object}    headers   the list of headers to send by default\n *\n * @returns {Hock}\n */\nHock.prototype.defaultReplyHeaders = function (headers) {\n  this._defaultReplyHeaders = headers;\n  return this;\n};\n\n/**\n * Hock.handler\n *\n * @description Handle incoming requests\n *\n * @returns {Function}\n * @private\n */\nHock.prototype.handler = function (req, res) {\n  var self = this;\n\n  var matchIndex = null;\n\n  req.body = '';\n\n  req.on('data', function (data) {\n    req.body += data.toString();\n  });\n\n  req.on('end', function () {\n\n    for (var i = 0; i < self._assertions.length; i++) {\n      if (self._assertions[i].isMatch(req)) {\n        matchIndex = i;\n        break;\n      }\n    }\n\n    if (matchIndex === null) {\n      if (self._throwOnUnmatched) {\n        throw new Error('No Match For: ' + req.method + ' ' + req.url);\n      }\n\n      console.error('No Match For: ' + req.method + ' ' + req.url);\n      if (req.method === 'PUT' || req.method === 'PATCH' || req.method === 'POST') {\n        console.error(req.body);\n      }\n      res.writeHead(500, { 'Content-Type': 'text/plain' });\n      res.end('No Matching Response!\\n');\n    }\n    else {\n      if (self._assertions[matchIndex].sendResponse(res)) {\n        self._assertions.splice(matchIndex, 1)[0];\n      }\n    }\n  });\n};\n\n/**\n * exports.createHock\n *\n * @description static method for creating your hock server\n *\n * @param {object}      [options]       options for your Hock server\n * @param {Number}      [options.port]  port number for your Hock server\n * @param {boolean}     [options.throwOnUnmatched]  Tell Hock to throw if\n *    receiving a request without a match (Default=true)\n *\n * @returns {Hock}\n */\nvar createHock = function(options) {\n  return new Hock(options);\n};\n\nmodule.exports = createHock;\nmodule.exports.createHock = createHock;\n","/home/travis/build/npmtest/node-npmtest-hock/node_modules/hock/lib/request.js":"var fs = require('fs'),\n    Stream = require('stream');\n\n// From Nock\nfunction isStream(obj) {\n  return obj &&\n      (typeof a !== 'string') &&\n      (! Buffer.isBuffer(obj)) &&\n      typeof obj.setEncoding === 'function';\n}\n\n/**\n * Request class\n *\n * @description This is the Request class for Hock. It represents a single request,\n * and the response to that request\n *\n * @param {object}      parent    the hock server this request belongs to\n * @param {object}      options\n * @param {String}      options.url         the route for the current request i.e. /foo/bar\n * @param {String|object}   [options.body]  optional request body\n *\n * @param {object}      [options.headers]   optional request headers\n * @param {object}      [options.method]    the method for the request (default=GET)\n *\n * @type {Function}\n */\nvar Request = module.exports = function (parent, options) {\n  var self = this;\n\n  this.method = options.method || 'GET';\n  this.url = options.url;\n  this.body = options.body || '';\n  this.headers = options.headers || {};\n\n  if (typeof options.body === 'object') {\n    this.body = JSON.stringify(options.body);\n  }\n\n  Object.keys(this.headers).forEach(function (key) {\n    self.headers[key.toLowerCase()] = self.headers[key];\n    if (key.toLowerCase() !== key) {\n      delete self.headers[key];\n    }\n  });\n\n  this._defaultReplyHeaders = {};\n\n  this._parent = parent;\n  this._minRequests = 1;\n  this._maxRequests = 1;\n  this._count = 0;\n};\n\n/**\n * Request.reply\n *\n * @description provide the mocked reply for the current request\n *\n * @param {Number}          [statusCode]    Status Code for the response (200)\n * @param {String|object}   [body]          The body for the response\n * @param {object}          [headers]       Headers for the response\n * @returns {*}\n */\nRequest.prototype.reply = function (statusCode, body, headers) {\n  this.response = {\n    statusCode: statusCode || 200,\n    body: body || '',\n    headers: headers\n  };\n\n  this._parent.enqueue(this);\n\n  return this._parent;\n};\n\n/**\n * Request.replyWithFile\n *\n * @description provide the mocked reply for the current request based on an input file\n *\n * @param {Number}          statusCode      Status Code for the response (200)\n * @param {String}          filePath        The path of the file to respond with\n * @param {object}          [headers]       Headers for the response\n * @returns {*}\n */\nRequest.prototype.replyWithFile = function (statusCode, filePath, headers) {\n  this.response = {\n    statusCode: statusCode || 200,\n    body: fs.createReadStream(filePath),\n    headers: headers\n  };\n\n  this._parent.enqueue(this);\n\n  return this._parent;\n\n};\n\n/**\n * Request.many\n *\n * @decsription allow a request to match multiple queries at the same url.\n *\n * @param {object}    [options]       (default={min: 1, max: infinity})\n * @param {object}    [options.min]   minimum requests to be matched\n * @param {object}    [options.max]   max requests to be matched, must be >= min.\n * @returns {Request}\n */\nRequest.prototype.many = function(options) {\n  options = options || {\n    min: 1,\n    max: Infinity\n  };\n\n  if (typeof options.min === 'number') {\n    this._minRequests = options.min;\n    if (this._minRequests > this._maxRequests) {\n      this._maxRequests = this._minRequests;\n    }\n  }\n\n  if (typeof options.max === 'number') {\n    this._maxRequests = options.max;\n  }\n\n  return this;\n};\n\n/**\n * Request.min\n *\n * @description convenience function to provide a number for minimum requests\n *\n * @param {Number}    number    the value for min\n * @returns {Request}\n */\nRequest.prototype.min = function(number) {\n  return this.many({ min: number });\n};\n\n/**\n * Request.max\n *\n * @description convenience function to provide a number for maximum requests\n *\n * @param {Number}    number    the value for max\n * @returns {Request}\n */\nRequest.prototype.max = function (number) {\n  return this.many({ max: number });\n};\n\n/**\n * Request.once\n *\n * @description convenience function to set min, max to 1\n *\n * @returns {Request}\n */\nRequest.prototype.once = function() {\n  return this.many({ min: 1, max: 1 });\n};\n\n/**\n * Request.twice\n *\n * @description convenience function to set min, max to 2\n *\n * @returns {Request}\n */\nRequest.prototype.twice = function() {\n  return this.many({ min: 1, max: 2 });\n}\n\n/**\n * Request.any\n *\n * @description convenience function to set min 0, max to Infinity\n *\n * @returns {Request}\n */\nRequest.prototype.any = function() {\n  return this.many({ min: 0, max: Infinity });\n}\n\n/**\n * Request.isMatch\n *\n * @description identify if the current request matches the provided request\n *\n * @param {object}      request   The request from the Hock server\n *\n * @returns {boolean|*}\n */\nRequest.prototype.isMatch = function(request) {\n  var self = this;\n\n  if (this._parent._pathFilter) {\n    request.url = this._parent._pathFilter(request.url);\n  }\n\n  if (request.method === 'GET' || request.method === 'DELETE') {\n    return this.method === request.method && request.url === this.url && checkHeaders();\n  }\n  else {\n    var body = request.body;\n    if (this._requestFilter) {\n      body = this._requestFilter(request.body);\n    }\n\n    return this.method === request.method && this.url === request.url &&\n      this.body === body && checkHeaders();\n\n  }\n\n  function checkHeaders() {\n    var match = true;\n    Object.keys(self.headers).forEach(function (key) {\n      if (self.headers[key] && self.headers[key] !== request.headers[key]) {\n        match = false;\n      }\n    });\n\n    return match;\n  }\n};\n\n/**\n * Request.sendResponse\n *\n * @description send the response to the provided Hock response\n *\n * @param {object}    response    The response object from the hock server\n */\nRequest.prototype.sendResponse = function(response) {\n  var self = this;\n\n  this._count++;\n\n  var headers = this.response.headers || this._defaultReplyHeaders;\n\n  response.writeHead(this.response.statusCode, headers);\n\n  if (isStream(this.response.body)) {\n    var readStream = this.response.body;\n\n    if (this._maxRequests > 1) {\n      // Because we need to respond with this body more than once, if it is a stream,\n      // we make a buffer copy and use that as the body for future responses.\n      var data = [];\n      \n      readStream.on('readable', function () {\n        var chunk;\n        while (null !== (chunk = readStream.read())) {\n          data.push(chunk);\n          response.write(chunk);\n        }\n      });\n      readStream.on('end', function(){\n        self.response.body = Buffer.concat(data);\n        response.end();\n      });\n    }\n    else {\n      readStream.pipe(response);\n    }\n  }\n  else if ((typeof this.response.body === 'object') && !Buffer.isBuffer(this.response.body)) {\n    response.end(JSON.stringify(this.response.body));\n  }\n  else {\n    response.end(this.response.body);\n  }\n\n  return this.shouldPrune();\n};\n\n/**\n * Request.isDone\n *\n * @description Identify if the current request has met its min and max requirements\n *\n * @returns {boolean}\n */\nRequest.prototype.isDone = function() {\n  return !(this._count >= this._minRequests && this._count <= this._maxRequests);\n};\n\n/**\n * Request.shouldPrune\n *\n * @description Identify if the request has met its max requirement\n *\n * @returns {boolean}\n */\nRequest.prototype.shouldPrune = function() {\n  return this._count >= this._maxRequests;\n};\n\n/**\n * Request.toJSON\n *\n * @returns {{method: *, url: *, body: *, headers: *, stats: {count: number, min: (Function|*|Object), max: *, isValid: *, shouldPrune: *}}}\n */\nRequest.prototype.toJSON = function() {\n  return {\n    method: this.method,\n    url: this.url,\n    body: this.body,\n    headers: this.headers,\n    stats: {\n      count: this._count,\n      min: this._minRequests,\n      max: this._maxRequests,\n      isDone: this.isDone(),\n      shouldPrune: this.shouldPrune()\n    }\n  };\n};\n"}